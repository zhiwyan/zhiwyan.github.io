<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BIOS</title>
    <url>/2021/04/07/BIOS/</url>
    <content><![CDATA[<h2 id="计算机体系结构概述"><a href="#计算机体系结构概述" class="headerlink" title="计算机体系结构概述"></a>计算机体系结构概述</h2><p>CPU加电之后第一条指令在哪？</p>
<p>CS:IP = 0xf000:fff0.<br>(CS： 代码段寄存器；IP：指令寄存器)<br>系统处于实模式<br>PC = 16 * CS + IP<br>20位地址空间：1MB  </p>
<h2 id="BOIS启动固件"><a href="#BOIS启动固件" class="headerlink" title="BOIS启动固件"></a>BOIS启动固件</h2><ul>
<li>基本输入输出的程序</li>
<li>系统设置信息</li>
<li>开机自检程序</li>
<li>系统自启动程序等</li>
</ul>
<h2 id="BOIS"><a href="#BOIS" class="headerlink" title="BOIS"></a>BOIS</h2><ul>
<li>将加载程序从磁盘的引导区（512字节）加载到0x7c00.</li>
<li>跳转到 CS:IP = 0000:7c00</li>
</ul>
<h2 id="加载程序"><a href="#加载程序" class="headerlink" title="加载程序"></a>加载程序</h2><ul>
<li>将操作系统的代码和数据从硬盘加载到内存中.</li>
<li>跳转到操作系统的起始位置</li>
</ul>
<h2 id="内存位置图"><a href="#内存位置图" class="headerlink" title="内存位置图"></a>内存位置图</h2><p><img src="/uploads/biosmm.png" alt="内存位置图"></p>
<h2 id="BOIS系统调用"><a href="#BOIS系统调用" class="headerlink" title="BOIS系统调用"></a>BOIS系统调用</h2><ul>
<li>BOIS以中断调用的方式提供了基本的I/O功能<ul>
<li>INT 10h:字符显示</li>
<li>INT 13h:磁盘扇区读写</li>
<li>INT 15h:检测内存大小</li>
<li>INT 16h:键盘输入</li>
</ul>
</li>
<li>只能在x86的实模式下访问</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>tcp三次握手</title>
    <url>/2021/03/17/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
    <content><![CDATA[<h3 id="tcp三次握手的过程"><a href="#tcp三次握手的过程" class="headerlink" title="tcp三次握手的过程"></a>tcp三次握手的过程</h3><ol>
<li>客户端向服务器端发送请求建立新连接的SYN报文，随后客户端进入SYN-SENT阶段。</li>
<li>服务器端收到来自客户端的报文后，结束LISTEN阶段，并返回服务端能正常接收客户端发送的数据，并同意创建新链接的SYN和ACK报文，随后服务端进入SYN-RCVD阶段。</li>
<li>客户端接受到来自服务端的报文后，明确了从客户端到服务端的数据传输是正常的，结束SYN-SENT阶段。并返回确认收到服务端同意连接的ACK报文，随后客户端进入ESTABLISHED阶段。服务端收到来自客户端的报文，明确了服务端到客户端的数据传输是正常的，结束SYN-RCVD阶段，随后服务端进入ESTABLSHED阶段。<br>此后客户端跟服务端正常数据传输，这tcp三次握手的过程。</li>
</ol>
<h3 id="tcp建立连接一定需要三次握手的原因"><a href="#tcp建立连接一定需要三次握手的原因" class="headerlink" title="tcp建立连接一定需要三次握手的原因"></a>tcp建立连接一定需要三次握手的原因</h3><ol>
<li>完全建立起连接的标志是：<br> 1.客户端得知自己和服务器端的收信息和发信息都没有问题<br> 2.服务器端得知自己和客户端的收信息和发信息都没有问题</li>
<li>分析一下每次挥手客户端跟服务端知道的情况<br> 1.当客户端第一次向服务器发送建立连接的报文的时候，服务端收到报文后。服务端知道：客户端的发送和服务端的接收<br>是没有问题。此时客户端什么都不知道<br> 2.当服务端向客户端发送确认收到报文，并同意创建新链接的时候。客户端知道：客户端的发送和客户端的接受没有问题，也知道服务器端的发送和接受是没有问题的。此时服务端只知道：客户端的发送和服务端的接收<br>是没有问题<br> 3.当客户向服务器端返回确认收到服务端同意连接的报文的时候。服务端知道：服务端的发送和客户端的接收是没有问题的，加上第一次握手的时候，此时服务器知道服务端和客户端的发送和接收都是没有问题的。<br>直到客户端和服务器端，都知道自己和对方的接受信息和发送信息都联通，此时建立的会话才是双向联通的。</li>
</ol>
<p>在通信的过程中，发送数据会都会分配一个序号。三步握手的过程，主要是为了互相确认双方的起始序列号。<br>如果只进行两次握手，客户端发送链接请求及起始序列号seq = x, 收到 服务器端的起始序列号seq = y及对客户端序列号seq= x 的确认。此时，双方就 客户端的起始序列号达成了共识。此时，并没有对服务器的起始序列号达成共识，所以就需要进行第三次握手。对B的起始序列号达成共识，不能保证通信的可靠。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>x86 启动顺序</title>
    <url>/2021/04/14/x86%E5%90%AF%E5%8A%A8%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="x86启动顺序-第一条指令"><a href="#x86启动顺序-第一条指令" class="headerlink" title="x86启动顺序 - 第一条指令"></a>x86启动顺序 - 第一条指令</h3><ul>
<li>CS = F000H, EIP = 0000FFF0H</li>
<li>实地址是：<br>  Base + EIP = FFFF0000H + 0000FFF0H = FFFFFFF0H<br>  这是BIOS的EPROM（Erasable Programmable Read Only Memory）所在地</li>
<li>当CS被新值加载，则地址转换规则将开始起作用</li>
<li>通常第一条指令是一条长跳转指令(这样CS和EIP都会更新)到BIOS代码中执行</li>
</ul>
<h3 id="x86启动顺序-处于实模式的段"><a href="#x86启动顺序-处于实模式的段" class="headerlink" title="x86启动顺序 - 处于实模式的段"></a>x86启动顺序 - 处于实模式的段</h3><ul>
<li>段选择子（Segment Selector）: CS,DS,SS,…</li>
<li>偏移量（Offset）: EIP</li>
</ul>
<h3 id="x86启动顺序-从BIOS到Bootloader"><a href="#x86启动顺序-从BIOS到Bootloader" class="headerlink" title="x86启动顺序 - 从BIOS到Bootloader"></a>x86启动顺序 - 从BIOS到Bootloader</h3><ul>
<li>BIOS 加载存储设备（比如软盘、硬盘、光盘、USB盘）上的第一个 扇区（主引导扇区，Master Boot Record, or MBR）的512字节到内存的0x7c00 …</li>
<li>然后跳转到 @ 0x7c00的第一条指令开始执行</li>
</ul>
<h3 id="x86启动顺序-从Bootloader到OS"><a href="#x86启动顺序-从Bootloader到OS" class="headerlink" title="x86启动顺序 - 从Bootloader到OS"></a>x86启动顺序 - 从Bootloader到OS</h3><ul>
<li>bootloader做的事情<ul>
<li>使能保护模式（protection mode）&amp; 段机制（segmet-level protection）</li>
<li>从硬盘上读取kernel in ELF 格式的ucore kernel (跟在MBR后面的扇区)并放到内存中固定位置</li>
<li>跳转到ucore OS的入口点（entry point）执行，这时控制器到了ucore OS中</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>中断、异常和系统调用比较</title>
    <url>/2021/04/08/%E4%B8%AD%E6%96%AD%E3%80%81%E5%BC%82%E5%B8%B8%E5%92%8C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul>
<li>为什么需要中断、异常和系统调用<ul>
<li>在计算机运行中，内核是被信任的第三方</li>
<li>只有内核可以执行特权指令</li>
<li>方便应用程序</li>
</ul>
</li>
<li>中断和异常希望解决的问题<ul>
<li>当外设连接计算机时，会出现什么现象？</li>
<li>当应用程序处理意想不到的行为时，会出现什么现象？</li>
</ul>
</li>
<li>系统调用希望解决的问题<ul>
<li>用户应用程序是如何得到系统服务？</li>
<li>系统调用和功能调用的不同之处是什么？</li>
</ul>
</li>
</ul>
<h3 id="内核的进入与退出"><a href="#内核的进入与退出" class="headerlink" title="内核的进入与退出"></a>内核的进入与退出</h3><p><img src="/uploads/kernel_input_output.png" alt="内核的进入与退出图"></p>
<h3 id="中断、异常和系统调用"><a href="#中断、异常和系统调用" class="headerlink" title="中断、异常和系统调用"></a>中断、异常和系统调用</h3><ul>
<li>系统调用（system call）<ul>
<li>应用程序主动向操作系统发出服务请求</li>
</ul>
</li>
<li>异常（exception）<ul>
<li>非法指令或者其他原因导致当前指令执行失败<br>  （如：内存出错）后的处理请求</li>
</ul>
</li>
<li>中断（hardware interrupt）<ul>
<li>来自硬件设备的处理请求</li>
</ul>
</li>
</ul>
<h3 id="中断、异常和系统调用比较"><a href="#中断、异常和系统调用比较" class="headerlink" title="中断、异常和系统调用比较"></a>中断、异常和系统调用比较</h3><ul>
<li>源头<ul>
<li>中断：外设</li>
<li>异常：应用程序意想不到的行为</li>
<li>系统调用： 应用程序请求操作提供服务</li>
</ul>
</li>
<li>响应方式<ul>
<li>中断：异步</li>
<li>异常：异步</li>
<li>系统调用：异步或同步</li>
</ul>
</li>
<li>处理机制<ul>
<li>中断：持续进行，对用户应用程序是透明的</li>
<li>异常：杀死或者重新执行意想不到的应用程序指令</li>
<li>系统调用：等待和持续</li>
</ul>
</li>
</ul>
<h3 id="中断处理机制"><a href="#中断处理机制" class="headerlink" title="中断处理机制"></a>中断处理机制</h3><ul>
<li>硬件处理<ul>
<li>在CPU初始化时设置中断使能标志<ul>
<li>依据内部或外部事件设置中断标志</li>
<li>依据中断向量调用相应中断服务例程</li>
</ul>
</li>
</ul>
</li>
<li>软件<ul>
<li>现场保存（编译器）</li>
<li>中断服务处理（服务例程）</li>
<li>清除中断标记（服务例程）</li>
<li>现场恢复（编译器）</li>
</ul>
</li>
</ul>
<h3 id="中断嵌套"><a href="#中断嵌套" class="headerlink" title="中断嵌套"></a>中断嵌套</h3><ul>
<li>硬件中断服务例程可被打断<ul>
<li>不同硬件中断源可能硬件中断处理时出现</li>
<li>硬件中断服务例程中需要临时禁止中断请求</li>
<li>中断请求会保持到CPU做出响应</li>
</ul>
</li>
<li>异常服务例程可被打断<ul>
<li>异常服务例程执行时可能出现硬件中断</li>
</ul>
</li>
<li>异常服务例程可嵌套<ul>
<li>异常服务例程可能出现缺页</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>了解ucore编程方法和通用数据结构</title>
    <url>/2021/04/06/%E4%BA%86%E8%A7%A3ucore%E7%BC%96%E7%A8%8B%E6%96%B9%E6%B3%95%E5%92%8C%E9%80%9A%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="了解ucore编程方法和通用数据结构"><a href="#了解ucore编程方法和通用数据结构" class="headerlink" title="了解ucore编程方法和通用数据结构"></a>了解ucore编程方法和通用数据结构</h2><h3 id="面向对象编程方法"><a href="#面向对象编程方法" class="headerlink" title="面向对象编程方法"></a>面向对象编程方法</h3><ul>
<li>ucore主要基于C语言设计，采用了一定的面向对象编程方法。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;lab2&#x2F;kern&#x2F;mm&#x2F;pmm.h</span><br><span class="line">-------------------</span><br><span class="line">struct pmm_manager &#123;</span><br><span class="line">    const char *name;</span><br><span class="line">    void (*init)(void);</span><br><span class="line"></span><br><span class="line">    void (*init_memmap)(struct Page *base, size_t n);</span><br><span class="line"></span><br><span class="line">    struct Page *(*alloc_pages)(size_t n);</span><br><span class="line">    void (*free_pages)(struct Page *base, size_t n);</span><br><span class="line">    size_t (*nr_free_pages)(void);</span><br><span class="line">    void (*check)(void);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="通用数据结构"><a href="#通用数据结构" class="headerlink" title="通用数据结构"></a>通用数据结构</h3><ul>
<li><p>双向循环链表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct foo &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    struct foo *prev;</span><br><span class="line">    struct foo *next;</span><br><span class="line">&#125; foo_t;</span><br></pre></td></tr></table></figure></li>
<li><p>uCore的双向链表结构定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct list_entry &#123;</span><br><span class="line">    struct list_entry *prev,*next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    list_entry_t free_list;</span><br><span class="line">    unsigned int nr_free;</span><br><span class="line">&#125; free_area_t;</span><br><span class="line"></span><br><span class="line">struct Page &#123;</span><br><span class="line">    atomic_t ref;</span><br><span class="line">    .......</span><br><span class="line">    list_entry_t page_link;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>链表操作函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list_init(list_entry_t *elm)</span><br><span class="line">list_add_after和list_add_before</span><br><span class="line">list_del(list_entry_t *listelm)</span><br></pre></td></tr></table></figure></li>
<li><p>访问链表节点所在的宿主数据结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">free_area_t free_data;</span><br><span class="line">list_entry_t *le &#x3D; &amp;free_area.free_list;</span><br><span class="line">while((le&#x3D;list_next(le)) !&#x3D; &amp;free_area.free_list) &#123;</span><br><span class="line">    struct Page *p &#x3D; le2page(le, page_link);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define le2page(le, member)  to_struct((le), struct Page, member)</span><br><span class="line">#define to_struct(ptr, type, member)    ((type *)((char *)(ptr) - offsetof(type, member)))</span><br><span class="line">#define offsetof(type, member)  ((size_t)(&amp;((type *)0)-&gt;member))</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>了解x86-32硬件-寄存器</title>
    <url>/2021/04/06/%E4%BA%86%E8%A7%A3x86-32%E7%A1%AC%E4%BB%B6-%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    <content><![CDATA[<h2 id="了解x86-32硬件-寄存器"><a href="#了解x86-32硬件-寄存器" class="headerlink" title="了解x86-32硬件-寄存器"></a>了解x86-32硬件-寄存器</h2><h3 id="08386的寄存器可以分为8组"><a href="#08386的寄存器可以分为8组" class="headerlink" title="08386的寄存器可以分为8组"></a>08386的寄存器可以分为8组</h3><ol>
<li>通用寄存器</li>
<li>段寄存器</li>
<li>指令指针寄存器</li>
<li>标志寄存器</li>
<li>控制寄存器</li>
<li>系统地址寄存器</li>
<li>调试寄存器</li>
<li>测试寄存器</li>
</ol>
<h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><ol>
<li>EAX: 累加器</li>
<li>EBX: 基址寄存器</li>
<li>ECX: 计数器</li>
<li>EDX: 数据寄存器</li>
<li>ESI: 源地址指针寄存器</li>
<li>EDI: 目的地指针寄存器</li>
<li>EBP: 基址指针寄存器</li>
<li>ESP: 堆栈指针寄存器</li>
</ol>
<h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><ol>
<li>CS: 代码段(Code Segment)</li>
<li>DS: 数据段(Data Segment)</li>
<li>ES: 附加数据段(Extra Segment)</li>
<li>SS: 堆栈段(Stack Segment)</li>
<li>FS: 附加段</li>
<li>GS: 附加段</li>
</ol>
<h3 id="指令寄存器和标志寄存器"><a href="#指令寄存器和标志寄存器" class="headerlink" title="指令寄存器和标志寄存器"></a>指令寄存器和标志寄存器</h3><ul>
<li><p>EIP: 指令寄存器</p>
<blockquote>
<p>EIP的低16位就是8086的IP，它存储的是下一条要执行指令的内存地址，在分段地址转换中，表示指令的段内偏移地址。</p>
</blockquote>
</li>
<li><p>EFLAGS: 标志寄存器</p>
<blockquote>
<p>IF(Interrupt Flag)：中断标志位，由CLI，STI两条指令来控制；设置IF使CPU可识别外部(可屏蔽)中断请求。复位IF则禁止中断。IF对不可屏蔽外部中断和故障中断的识别没有任何作用。</p>
</blockquote>
<blockquote>
<p>CF,PF,ZF,…</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>系统调用</title>
    <url>/2021/04/09/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h3 id="标准C库的例子"><a href="#标准C库的例子" class="headerlink" title="标准C库的例子"></a>标准C库的例子</h3><ul>
<li>应用程序调用printf()时，会触发系统调用write()。</li>
</ul>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><ul>
<li>操作系统服务的编程接口</li>
<li>通常由高级语言编写（C或C++）</li>
<li>程序访问通常是通过高层次的API接口而不是直接进行系统调用</li>
<li>三种最常用的应用程序编程接口（API）<ul>
<li>Win32 API用于Windows</li>
<li>POSIX API用于POSIX-based systems(包括UNIX, LINUX, Mac OS X的所有版本)</li>
<li>Java API用于JAVA虚拟机（JVM）</li>
</ul>
</li>
</ul>
<h3 id="系统调用的实现"><a href="#系统调用的实现" class="headerlink" title="系统调用的实现"></a>系统调用的实现</h3><ul>
<li>每个系统调用对应一个系统调用号<ul>
<li>系统调用接口根据系统调用号来维护表的索引</li>
</ul>
</li>
<li>系统调用接口调用内核态中的系统调用功能实现，并返回系统调用的状态和结果</li>
<li>用户不需要知道系统调用实现<ul>
<li>需要设置调用参数和获取返回结果</li>
<li>操作系统接口的细节大部分都隐藏在应用编程接口后<ul>
<li>通过运行程序支持的库来管理</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="函数调用和系统调用的不同处"><a href="#函数调用和系统调用的不同处" class="headerlink" title="函数调用和系统调用的不同处"></a>函数调用和系统调用的不同处</h3><ul>
<li>系统调用<ul>
<li>INT和IRET指令用于系统调用<ul>
<li>系统调用时，堆栈切换和特权级的转换</li>
</ul>
</li>
</ul>
</li>
<li>函数调用<ul>
<li>CALL和RET用于常规调用<ul>
<li>常规调用时没有堆栈切换</li>
</ul>
</li>
</ul>
</li>
<li>Intel 64 and IA-32 Architecture Software Developer</li>
</ul>
<h3 id="中断、异常和系统调用的开销"><a href="#中断、异常和系统调用的开销" class="headerlink" title="中断、异常和系统调用的开销"></a>中断、异常和系统调用的开销</h3><ul>
<li>超过函数调用</li>
<li>中断、异常和系统调用<ul>
<li>引导机制</li>
<li>建立内核堆栈</li>
<li>验证参数</li>
<li>内核态映射到用户态地址空间<ul>
<li>跟新页面映射权限</li>
</ul>
</li>
<li>内核态独立地址空间<ul>
<li>TLB</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>系统调用示例</title>
    <url>/2021/04/12/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="系统调用示例"><a href="#系统调用示例" class="headerlink" title="系统调用示例"></a>系统调用示例</h3><ul>
<li><p>文件复制过程中的系统调用序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">源文件 ----------------&gt; 目标文件</span><br><span class="line">    获取输入文件名</span><br><span class="line">        在屏幕显示提示</span><br><span class="line">        等待并接受键盘输入</span><br><span class="line">    获取输出文件名</span><br><span class="line">        在屏幕显示提示</span><br><span class="line">        等待并接受键盘输入</span><br><span class="line">    打开输入文件</span><br><span class="line">    如果文件不存在，出错并退出</span><br><span class="line">    创建输出文件</span><br><span class="line">    如果文件存在，出错并退出</span><br><span class="line">    循环</span><br><span class="line">        读取输入文件</span><br><span class="line">        写入输出文件</span><br><span class="line">    直到读取结束</span><br><span class="line">    关闭输出文件</span><br><span class="line">    在屏幕显示完成信息</span><br><span class="line">    正常退出</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System call numbers</span><br><span class="line">#define SYS _fork 1</span><br><span class="line">#define SYS _exit 2</span><br><span class="line">#define SYS _wait 3</span><br><span class="line">#define SYS _pipe 4</span><br><span class="line">#define SYS _write 5</span><br><span class="line">#define SYS _read 6</span><br><span class="line">#define SYS _close 7</span><br><span class="line">#define SYS _kill 8</span><br><span class="line">#define SYS _exec 9</span><br><span class="line">#define SYS _open 10</span><br><span class="line">#define SYS _mknod 11</span><br><span class="line">#define SYS _unlink 12</span><br><span class="line">#define SYS _fstat 13</span><br><span class="line">#define SYS _link 14</span><br><span class="line">#define SYS _mkdir 15</span><br><span class="line">#define SYS _chdir 16</span><br><span class="line">#define SYS _dup 17</span><br><span class="line">#define SYS _getpid 18</span><br><span class="line">#define SYS _sbrk 19</span><br><span class="line">#define SYS _sleep 20</span><br><span class="line">#define SYS _procmem 21</span><br></pre></td></tr></table></figure></li>
<li><p>在ucore中库函数read()的功能是读文件</p>
<ul>
<li>user/libs/file.h: int read(int fd, void * buf, int length)</li>
</ul>
</li>
<li><p>库函数read()的参数和返回值</p>
<ul>
<li>int fd-文件句柄</li>
<li>void * buf-数据缓冲区指针</li>
<li>int length-数据缓冲区长度</li>
<li>int return_value:返回读取数据长度</li>
</ul>
</li>
<li><p>库韩式read()使用示例</p>
<ul>
<li>in sfs_filetest1.c: ret = read(fd, data, len);<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sfs_filetest1.c: ret &#x3D; read(fd, data, len);</span><br><span class="line">    ......</span><br><span class="line">    8029a1:8b 45 10       mov     0x10(%ebp),%eax</span><br><span class="line">    8029a4:89 44 24 08      mov     %eax,0x8(%esp)</span><br><span class="line">    8029a8:8b 45 0c       mov     0xc(%ebp),%eax </span><br><span class="line">    8029ab:89 44 24 04      mov     %eax,0xc(%esp)</span><br><span class="line">    8029af:8b 45 08       mov     0x8(%ebp),%eax</span><br><span class="line">    8029b2:89 04 24       mov       %eax,(%esp)</span><br><span class="line">    8029b5:e8 33 d8 ff ff   call 8001ed &lt;read&gt;    </span><br><span class="line">syscall(int num, ...)&#123;</span><br><span class="line">...</span><br><span class="line">    asm volatile(</span><br><span class="line">        &quot;int %1;&quot;</span><br><span class="line">        : &quot;&#x3D;a&quot; (ret)</span><br><span class="line">        : &quot;i&quot; (T_SYSCALL),</span><br><span class="line">        &quot;a&quot; (num),</span><br><span class="line">        &quot;d&quot; (a[0]),</span><br><span class="line">        &quot;c&quot; (a[1]),</span><br><span class="line">        &quot;b&quot; (a[2]),</span><br><span class="line">        &quot;D&quot; (a[3]),</span><br><span class="line">        &quot;S&quot; (a[4])</span><br><span class="line">        :&quot;cc&quot;, &quot;memory&quot; );</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="ucore系统调用read-fd-buffer-length-的实现"><a href="#ucore系统调用read-fd-buffer-length-的实现" class="headerlink" title="ucore系统调用read(fd, buffer, length)的实现"></a>ucore系统调用read(fd, buffer, length)的实现</h3><ol>
<li>kern/trap/trapentry.S: alltraps()</li>
<li>kern/trap/trap.c: trap()<br> tf-&gt;trapno = = T_SYSCALL</li>
<li>kern/syscall/syscall.c: syscall()<br> tf-&gt;tf_regs.reg_eax = = SYS_read</li>
<li>kern/syscall/syscall.c: sys_read()<br> 从 tf-&gt;sp 获取 fd, buf, length</li>
<li>kern/fs/sysfile.c: sysfile_read()<br> 读取文件</li>
<li>kern/trap/trapentry.S: trapret()</li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机启动流程</title>
    <url>/2021/04/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="计算机启动流程"><a href="#计算机启动流程" class="headerlink" title="计算机启动流程"></a>计算机启动流程</h2><p><img src="/uploads/compute_start.png" alt="计算机启动流程图"></p>
<h3 id="CPU初始化"><a href="#CPU初始化" class="headerlink" title="CPU初始化"></a>CPU初始化</h3><ul>
<li><p>CPU 加电稳定后从0xffff0读第一条指令</p>
<ul>
<li>CS:IP = 0xf000:fff0</li>
<li>第一条指令是跳转指令</li>
</ul>
</li>
<li><p>CPU初始状态为16位实模式</p>
<ul>
<li>CS:IP是16位寄存器</li>
<li>指令指针 PC = 16*CS + IP</li>
<li>最大地址空间是1MB</li>
</ul>
</li>
</ul>
<h3 id="BIOS初始化过程"><a href="#BIOS初始化过程" class="headerlink" title="BIOS初始化过程"></a>BIOS初始化过程</h3><ul>
<li>硬件自检POST</li>
<li>检测系统中内存和显卡等关键部件的存在和工作状态</li>
<li>查找并执行显卡等接口卡BIOS，进行设备初始化</li>
<li>执行系统BIOS，进行系统检测<ul>
<li>检测和配置系统中安装的即插即用设备</li>
</ul>
</li>
<li>更新CMOS中的扩展系统配置数据ESCD</li>
<li>按指定启动顺序从软盘、硬盘或光驱启动</li>
</ul>
<h3 id="主引导记录MBR格式"><a href="#主引导记录MBR格式" class="headerlink" title="主引导记录MBR格式"></a>主引导记录MBR格式</h3><ul>
<li>启动代码：446字节<ul>
<li>检查分区表正确性</li>
<li>加载并跳转到磁盘上的引导程序</li>
</ul>
</li>
<li>硬盘分区表：64字节<ul>
<li>描述分区状态和位置</li>
<li>每个分区描述信息占据16字节</li>
</ul>
</li>
<li>结束标志字：2字节（55AA）<ul>
<li>主引导记录的有效标志</li>
</ul>
</li>
</ul>
<h3 id="分区引导扇区格式"><a href="#分区引导扇区格式" class="headerlink" title="分区引导扇区格式"></a>分区引导扇区格式</h3><ul>
<li>跳转指令：跳转到启动代码<ul>
<li>与平台相关代码</li>
</ul>
</li>
<li>文件卷头：文件系统描述信息</li>
<li>启动代码：跳转到加载程序</li>
<li>结束标志：55AA(0x55 0xAA) 二进制为： 0101010110101010</li>
</ul>
<h3 id="加载程序（bootloader）"><a href="#加载程序（bootloader）" class="headerlink" title="加载程序（bootloader）"></a>加载程序（bootloader）</h3><p><img src="/uploads/bootloader.png" alt="加载程序图"></p>
<h3 id="系统启动规范"><a href="#系统启动规范" class="headerlink" title="系统启动规范"></a>系统启动规范</h3><ul>
<li>BIOS<ul>
<li>固化到计算机主板上的程序</li>
<li>包括系统设置、自检程序和系统自启动程序</li>
<li>BIOS-MBR、BIOS-GPT、PXE</li>
</ul>
</li>
<li>UEFI(统一可扩展固件接口)<ul>
<li>接口标准</li>
<li>在所有平台上一致的操作系统启动服务</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
</search>
